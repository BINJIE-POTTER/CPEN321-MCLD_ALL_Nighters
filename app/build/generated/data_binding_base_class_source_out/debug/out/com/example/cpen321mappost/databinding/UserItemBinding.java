// Generated by view binder compiler. Do not edit!
package com.example.cpen321mappost.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cpen321mappost.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UserItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CardView cardViewUserList;

  @NonNull
  public final ImageView imageViewUserList;

  @NonNull
  public final LinearLayout innerLinearLayout;

  @NonNull
  public final Button userListUserFollowButton;

  @NonNull
  public final TextView userListUserName;

  @NonNull
  public final TextView userListUserPostCountAndFollowers;

  private UserItemBinding(@NonNull LinearLayout rootView, @NonNull CardView cardViewUserList,
      @NonNull ImageView imageViewUserList, @NonNull LinearLayout innerLinearLayout,
      @NonNull Button userListUserFollowButton, @NonNull TextView userListUserName,
      @NonNull TextView userListUserPostCountAndFollowers) {
    this.rootView = rootView;
    this.cardViewUserList = cardViewUserList;
    this.imageViewUserList = imageViewUserList;
    this.innerLinearLayout = innerLinearLayout;
    this.userListUserFollowButton = userListUserFollowButton;
    this.userListUserName = userListUserName;
    this.userListUserPostCountAndFollowers = userListUserPostCountAndFollowers;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UserItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UserItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.user_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UserItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardView_userList;
      CardView cardViewUserList = ViewBindings.findChildViewById(rootView, id);
      if (cardViewUserList == null) {
        break missingId;
      }

      id = R.id.imageView_userList;
      ImageView imageViewUserList = ViewBindings.findChildViewById(rootView, id);
      if (imageViewUserList == null) {
        break missingId;
      }

      id = R.id.innerLinearLayout;
      LinearLayout innerLinearLayout = ViewBindings.findChildViewById(rootView, id);
      if (innerLinearLayout == null) {
        break missingId;
      }

      id = R.id.user_list_user_follow_button;
      Button userListUserFollowButton = ViewBindings.findChildViewById(rootView, id);
      if (userListUserFollowButton == null) {
        break missingId;
      }

      id = R.id.user_list_user_name;
      TextView userListUserName = ViewBindings.findChildViewById(rootView, id);
      if (userListUserName == null) {
        break missingId;
      }

      id = R.id.user_list_user_post_count_and_followers;
      TextView userListUserPostCountAndFollowers = ViewBindings.findChildViewById(rootView, id);
      if (userListUserPostCountAndFollowers == null) {
        break missingId;
      }

      return new UserItemBinding((LinearLayout) rootView, cardViewUserList, imageViewUserList,
          innerLinearLayout, userListUserFollowButton, userListUserName,
          userListUserPostCountAndFollowers);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
